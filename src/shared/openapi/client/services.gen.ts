// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-fetch";
import type {
  InitiateWebSessionData,
  InitiateWebSessionError,
  InitiateWebSessionResponse,
  GetWebSessionStatusData,
  GetWebSessionStatusError,
  GetWebSessionStatusResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Initiate a Web Session flow from the given parameters:
 * - The `audience` value is given during integration for each client.
 * - A `secret` nonce generated randomly in the client.
 *
 * In response, the flow's identifier `code` and its expiry are returned.
 *
 * This endpoint starts the authentication flow as described below:
 * 1. Initiate the flow with a `secret`, getting back its `code`.
 * 2. Construct a universal link of the form https://swissborg.com/wa/v1/web/login/{code} and
 * share it with the user either as a QR code or a button.
 * 3. Poll the status endpoint to retrieve the session token, or until the deadline `expires_at` is reached.
 *
 */
export const initiateWebSession = <ThrowOnError extends boolean = false>(
  options: Options<InitiateWebSessionData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    InitiateWebSessionResponse,
    InitiateWebSessionError,
    ThrowOnError
  >({
    ...options,
    url: "/web-auth/session/setup",
  });
};

/**
 * Get the Web Session flow status and its associated session token if successfully completed.
 * A polling of 1 second should be used to get the latest status, until a terminal state is reached.
 *
 */
export const getWebSessionStatus = <ThrowOnError extends boolean = false>(
  options: Options<GetWebSessionStatusData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    GetWebSessionStatusResponse,
    GetWebSessionStatusError,
    ThrowOnError
  >({
    ...options,
    url: "/web-auth/session/status/{code}",
  });
};
